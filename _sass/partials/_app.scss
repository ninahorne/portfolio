// Main Styles

// See the other SASS partials for typography, variables etc.
// CSS Grid is used for the layout with fallbacks for less capable browsers
// declared beforehand, and a @supports feature query to reset fallbacks when
// necessary. https://rachelandrew.co.uk/css/cheatsheets/grid-fallbacks

@use "sass:map";

// the body element is our primary layout grid
html {
  cursor: url("/assets/img/icons/rocket.png"), auto;
}

body {
  perspective: 1px;
  overflow-x: hidden;
  overflow-y: auto;
  display: grid;

  grid-template-rows: auto 1fr auto;
  grid-template-columns:
    [full-start] minmax(1rem, 1fr)
    [main-start] minmax(0, 80rem) [main-end]
    minmax(1rem, 1fr) [full-end];
  z-index: 1;
}

// by default, make any new children of body to span the full track
body > * {
  grid-column: full;
  padding: 2rem 1rem;
}

// header, the first grid row
// it is also a grid for the logo and nav
header {
  grid-column: full;
  display: grid;
  border-bottom: 1px solid white;
  padding: 2rem;
  background-color: transparent;
  @media screen and (min-width: $screen-sm-min) {
    grid-template-columns: 1fr auto;
    grid-column-gap: 1rem;
  }
}

// logo, is a grid item
header > h1 {
  display: inline-block;
  padding-bottom: 1rem;
  @media screen and (min-width: $screen-sm-min) {
    padding-bottom: 0;
  }
  a,
  a:visited {
    text-decoration: none;
    border: 0;
    @media screen and (min-width: $screen-sm-min) {
      padding: 1rem;
    }
  }
}

// main menu, is a grid item
header > nav {
  @media screen and (min-width: $screen-sm-min) {
    float: right;
  }
  ul {
    // flexbox is better than grid for distributing an unknown qty of children
    display: flex;
    li {
      margin-right: 2rem;
      display: inline-block;
      @media screen and (min-width: $screen-sm-min) {
        margin-right: 0;
      }
      a,
      a:visited {
        text-decoration: none;
        border: 0;
        @media screen and (min-width: $screen-sm-min) {
          padding: 1rem;
        }
        &[data-current="current page"] {
          // you can add an active nav item style here
        }
      }
    }
  }
}

// our main content wrapper, the width scales with font size
main {
  width: 100%;
  max-width: 52rem;
  margin-right: auto;
  margin-left: auto;
  grid-column: main;
  display: grid;
  padding-top: 8rem;
  padding-bottom: 8rem;
  @media screen and (min-width: $screen-md-min) {
    align-content: start;
  }
}

// reset breaking fallbacks (e.g. widths) if CSS Grid is supported
// float, inline-block, table properties are already ignored by CSS Grid
@supports (display: grid) {
  main {
    width: auto;
    max-width: none;
  }
}

// blog posts list
html[data-current="blog"] main > section {
  ul li {
    padding: 2rem 0;
    border-bottom: 0.05em solid $hairline-color;
    p {
      padding-bottom: 0;
    }
  }
}

// adjacent blog posts links
nav[aria-label="Adjacent Posts"] {
  padding: 4rem 0;
  ul {
    display: flex;
    li {
      flex: 0 0 50%;
      width: auto;
      &:nth-child(2) {
        text-align: right;
      }
    }
  }
}

// contact form
html[data-current="contact"] main > form {
  display: grid;
  label {
    display: none;
  }
  input,
  textarea {
    width: 100%;
    padding: 1rem;
    margin-bottom: 2rem;
  }
  button {
    width: 100%;
  }
}

// reset CSS Grid fallbacks when they aren't required
@supports (display: grid) {
  html[data-current="contact"] main > form {
    input,
    textarea,
    button {
      width: auto;
      max-width: none;
    }
  }
}

footer {
  grid-column: full;
  display: grid;
  grid-template-columns:
    [full-start] minmax(1rem, 1fr)
    [main-start] minmax(0, 50rem) [main-end]
    minmax(1rem, 1fr) [full-end];
  background-color: $grey-bg-color;
  > small {
    grid-column: main;
  }
}

// backgrounds
.background--trans-yellow {
  background-color: $trans-yellow;
  padding: 2rem;
  border-radius: 5px;
}
// flexbox styles
.flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// generic grid
.grid__two-columns {
  display: grid;
  grid-template-columns: 50% 50%;
  z-index: 1;
}

// components
.heading__fancy {
  font-family: "Orelega One", serif;
  font-weight: 900;
  font-size: 6rem;
  color: $green;
  // background: -webkit-linear-gradient(
  //   left,
  //   $pink,
  //   $purple,
  //   $green,
  //   $yellow,
  //   $orange
  // );
  -webkit-background-clip: text;
  // -webkit-text-fill-color: transparent;
  // -webkit-text-stroke-width: 0.5px;
  -webkit-text-stroke-color: $color2;
  text-shadow: 2px 2px 0px white;
}
.headshot {
  border-radius: 20px;
  border: 5px solid $purple;
  width: 20rem;
  display: center;
  margin: 0 auto;
}

.stars {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: -1;
  min-height: 100vh;
  background: linear-gradient(100deg, #272727 0%, $dark-sky-blue 80%);
  overflow: hidden;
  .star {
    position: absolute;
    border-radius: 100px;
  }
}

$colors: (
  1: $color1,
  2: $color2,
  3: $color3,
  4: $color4,
  5: $color5,
);

@keyframes twinkle {
  0%,
  80%,
  100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.3;
    transform: scale(0.5);
  }
}

@for $i from 1 through (1000) {
  .star:nth-of-type(#{$i}) {
    $size: random(3) + px;
    $delay: random(5) + s;
    $color: map.get($colors, random(5));
    $duration: random(5) + s;

    width: $size;
    height: $size;
    background-color: $color;
    @if ($i%3 == 0) {
      animation-name: twinkle;
      animation-duration: $duration;
      animation-timing-function: ease-in-out;
      animation-iteration-count: infinite;
      animation-delay: $delay;
    }
  }
}

.moon {
  position: absolute;
  top: 200px;
  right: 20vw;
  width: 300px;
  height: 300px;
}
@mixin shooting-star-template($starSize, $speed, $animationName) {
  z-index: 3;
  width: $starSize;
  height: $starSize + 20px;
  border-top-left-radius: 50%;
  border-top-right-radius: 50%;
  position: absolute;
  top: 100vh;
  right: 0;
  background: linear-gradient(
    to top,
    rgba(255, 255, 255, 0),
    rgba(255, 255, 255, 1)
  );
  animation: $animationName $speed ease-in-out infinite;
}

$starFieldWidth: 100;
$starFieldHeight: 100;

.shooting-star-1 {
  @include shooting-star-template( 2px, 5s, animShootingStarOne);
  animation-delay: 5s;
}


@keyframes animShootingStarOne {
  from {
    transform: translateY(0px) translateX(0px) rotate(-45deg);
    opacity: 1;
    height: 5px;
  }

  to {
    transform: translateY(-150vh)
      translateX(-100vh) rotate(-45deg);
    opacity: 0.3;
    height: 300px;
  }
}

.rocket-trail-wrapper {
  width: 100vw;
  height: 100vh;
  position: absolute;
  left: 0;
  right: 0;

  .rocket-trail {
    height: 10px;
    width: 10px;
    border: 1px solid black;
    background-color: orange;
    display: inline-block;
  }
}
